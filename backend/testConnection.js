// test-connection.js
require('dotenv').config();
const { Pool } = require('pg');

console.log('üîç Testando conex√£o com Neon DB...');
console.log('üìã Vari√°veis de ambiente:');
console.log('   DATABASE_URL:', process.env.DATABASE_URL ? 'Definida' : 'N√£o definida');
console.log('   DB_HOST:', process.env.DB_HOST || 'N√£o definido');
console.log('   DB_USER:', process.env.DB_USER || 'N√£o definido');
console.log('   DB_NAME:', process.env.DB_NAME || 'N√£o definido');

if (process.env.DATABASE_URL) {
    console.log('   DATABASE_URL (partial):', process.env.DATABASE_URL.substring(0, 50) + '...');
}

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false },
    connectionTimeoutMillis: 10000
});

async function testConnection() {
    try {
        console.log('\nüîÑ Tentando conectar...');
        const client = await pool.connect();
        const result = await client.query('SELECT NOW() as time, version() as version');
        console.log('‚úÖ Conex√£o bem-sucedida!');
        console.log('   ‚è∞ Hora do servidor:', result.rows[0].time);
        console.log('   üêò PostgreSQL:', result.rows[0].version.split(',')[0]);
        client.release();
        return true;
    } catch (error) {
        console.log('‚ùå Erro de conex√£o:');
        console.log('   üìå Mensagem:', error.message);
        console.log('   üîç C√≥digo:', error.code);
        return false;
    } finally {
        await pool.end();
    }
}

testConnection().then(success => {
    if (!success) {
        console.log('\nüí° Dicas para resolver:');
        console.log('   1. Verifique se o arquivo .env est√° na raiz do projeto');
        console.log('   2. Confirme se a DATABASE_URL est√° correta');
        console.log('   3. Teste a conex√£o no painel do Neon DB');
        console.log('   4. Verifique se sua rede permite conex√µes SSL');
    }
    process.exit(success ? 0 : 1);
});